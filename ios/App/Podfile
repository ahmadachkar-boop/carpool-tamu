require_relative '../../node_modules/@capacitor/ios/scripts/pods_helpers'

platform :ios, '14.0'
use_frameworks!

# workaround to avoid Xcode caching of Pods that requires
# Product -> Clean Build Folder after new Cordova plugins installed
# Requires CocoaPods 1.6 or newer
install! 'cocoapods', :disable_input_output_paths => true

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorGeolocation', :path => '../../node_modules/@capacitor/geolocation'
  pod 'CapacitorLocalNotifications', :path => '../../node_modules/@capacitor/local-notifications'
  pod 'CapacitorPushNotifications', :path => '../../node_modules/@capacitor/push-notifications'
end

target 'App' do
  capacitor_pods
  # Add your Pods here

  # Firebase for Push Notifications
  pod 'Firebase/Messaging', '~> 11.0'
end

post_install do |installer|
  assertDeploymentTarget(installer)

  # Fix for Firebase frameworks not being embedded properly
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'

      # Ensure frameworks are properly linked and embedded
      config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
      config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = [
        '$(inherited)',
        '@executable_path/Frameworks',
        '@loader_path/Frameworks'
      ]
    end
  end

  # Ensure App target has correct settings
  installer.pods_project.targets.each do |target|
    if target.name == 'Pods-App'
      target.build_configurations.each do |config|
        config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
      end
    end
  end

  # Fix privacy bundle build issues by removing them from dependencies
  installer.pods_project.targets.each do |target|
    # Remove privacy bundle targets from all target dependencies
    target.dependencies.delete_if do |dep|
      dep.name.end_with?('-Privacy') || dep.name.end_with?('_Privacy')
    end

    # Remove privacy bundle build phases
    target.build_phases.each do |build_phase|
      if build_phase.respond_to?(:files)
        build_phase.files.delete_if do |file|
          file.display_name&.include?('_Privacy.bundle') || file.display_name&.include?('-Privacy.bundle')
        end
      end
    end
  end

  # Remove privacy bundle targets completely from the project
  installer.pods_project.targets.each do |target|
    if target.name.end_with?('-Privacy') || target.name.end_with?('_Privacy')
      target.remove_from_project
    end
  end

  # Save the modified project
  installer.pods_project.save
end
